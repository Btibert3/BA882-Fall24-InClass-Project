from crewai import Agent, Task, Crew
from crewai.tools import tool
from google.cloud import secretmanager
import duckdb
from crewai_tools import NL2SQLTool

# setup
project_id = 'btibert-ba882-fall24'
secret_id = 'mother_duck'   #<---------- this is the name of the secret you created
version_id = 'latest'

# secret manager
sm = secretmanager.SecretManagerServiceClient()
name = f"projects/{project_id}/secrets/{secret_id}/versions/{version_id}"
response = sm.access_secret_version(request={"name": name})
md_token = response.payload.data.decode("UTF-8")

# connect to the warehouse
# md = duckdb.connect(f'md:?motherduck_token={md_token}')

# # create a custom tool for crewai
@tool("dbquery")
def dbquery(sql, db=md):
    """
    Execute a SQL query against the data warehouse and return the result as a CSV.

    Parameters:
    sql (str): The SQL query to be executed.
    db: The database connection object. Defaults to `md`.

    Returns:
    str: The result of the query in CSV format if successful.

    Raises:
    Exception: If the query execution fails.

    Note:
    A successful execution does not guarantee that the result is aligned with the user's intent, as that validation is handled by other agents.
    """
    res = db.sql(sql).df()
    return res.to_csv(index=False)


# pip install --upgrade duckdb-engine 
# nl2sql = NL2SQLTool(db_uri=f"duckdb:///md:awsblogs?motherduck_token={md_token}")


analyst = Agent(
    role='Data Analyst',
    goal="For the user's natural language query {query}, translate the request into a valid SQL query.",
    backstory='You are an expert at translating natural language to a database query',
    verbose=True,
    llm="gemini-1.5-pro-001",
    allow_delegation=True,
)

manager = Agent(
    role='Senior Data Analyst',
    goal="Use the SQL query generated by the Data Analyst and the dbquery tool to execute the query.  The connection the database has already been created, you just need to pass the SQL qauery",
    backstory='Run their SQL query and evaluate the results.  If the results of the query are incorrect or do not work, you are able to provide guidance to the team to redo their work.',
    verbose=True,
    llm="gemini-1.5-pro-001",
    allow_delegation=True,
    tools=[dbquery]
)

task1 = Task(
    description='Translate the users request via their query  {query} into a SQL query ',
    expected_output='A valid SQL query string that the Senior Data Analyst will review',
    agent=analyst
)

task2 = Task(
    description='review the query output',
    agent=manager,
    expected_output='The csv output representing the query results from the database',
    context=[task1]
)

my_crew = Crew(agents=[analyst, manager], tasks=[task1, task2])
user_query = "how many blog posts are there in the posts table?"
results = my_crew.kickoff(inputs=dict(query=user_query))

